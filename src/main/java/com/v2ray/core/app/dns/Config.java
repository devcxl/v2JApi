// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app/dns/config.proto

package com.v2ray.core.app.dns;

/**
 * Protobuf type {@code v2ray.core.app.dns.Config}
 */
public final class Config extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:v2ray.core.app.dns.Config)
    ConfigOrBuilder {
private static final long serialVersionUID = 0L;
  // Use Config.newBuilder() to construct.
  private Config(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private Config() {
    nameServers_ = java.util.Collections.emptyList();
    nameServer_ = java.util.Collections.emptyList();
    clientIp_ = com.google.protobuf.ByteString.EMPTY;
    staticHosts_ = java.util.Collections.emptyList();
    tag_ = "";
    queryStrategy_ = 0;
  }

  @java.lang.Override
  @SuppressWarnings({"unused"})
  protected java.lang.Object newInstance(
      UnusedPrivateParameter unused) {
    return new Config();
  }

  @java.lang.Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_descriptor;
  }

  @SuppressWarnings({"rawtypes"})
  @java.lang.Override
  protected com.google.protobuf.MapField internalGetMapField(
      int number) {
    switch (number) {
      case 2:
        return internalGetHosts();
      default:
        throw new RuntimeException(
            "Invalid map field number: " + number);
    }
  }
  @java.lang.Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            com.v2ray.core.app.dns.Config.class, com.v2ray.core.app.dns.Config.Builder.class);
  }

  public interface HostMappingOrBuilder extends
      // @@protoc_insertion_point(interface_extends:v2ray.core.app.dns.Config.HostMapping)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
     * @return The type.
     */
    com.v2ray.core.app.dns.DomainMatchingType getType();

    /**
     * <code>string domain = 2;</code>
     * @return The domain.
     */
    java.lang.String getDomain();
    /**
     * <code>string domain = 2;</code>
     * @return The bytes for domain.
     */
    com.google.protobuf.ByteString
        getDomainBytes();

    /**
     * <code>repeated bytes ip = 3;</code>
     * @return A list containing the ip.
     */
    java.util.List<com.google.protobuf.ByteString> getIpList();
    /**
     * <code>repeated bytes ip = 3;</code>
     * @return The count of ip.
     */
    int getIpCount();
    /**
     * <code>repeated bytes ip = 3;</code>
     * @param index The index of the element to return.
     * @return The ip at the given index.
     */
    com.google.protobuf.ByteString getIp(int index);

    /**
     * <pre>
     * ProxiedDomain indicates the mapped domain has the same IP address on this
     * domain. V2Ray will use this domain for IP queries.
     * </pre>
     *
     * <code>string proxied_domain = 4;</code>
     * @return The proxiedDomain.
     */
    java.lang.String getProxiedDomain();
    /**
     * <pre>
     * ProxiedDomain indicates the mapped domain has the same IP address on this
     * domain. V2Ray will use this domain for IP queries.
     * </pre>
     *
     * <code>string proxied_domain = 4;</code>
     * @return The bytes for proxiedDomain.
     */
    com.google.protobuf.ByteString
        getProxiedDomainBytes();
  }
  /**
   * Protobuf type {@code v2ray.core.app.dns.Config.HostMapping}
   */
  public static final class HostMapping extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:v2ray.core.app.dns.Config.HostMapping)
      HostMappingOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use HostMapping.newBuilder() to construct.
    private HostMapping(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private HostMapping() {
      type_ = 0;
      domain_ = "";
      ip_ = java.util.Collections.emptyList();
      proxiedDomain_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new HostMapping();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostMapping_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostMapping_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.v2ray.core.app.dns.Config.HostMapping.class, com.v2ray.core.app.dns.Config.HostMapping.Builder.class);
    }

    public static final int TYPE_FIELD_NUMBER = 1;
    private int type_;
    /**
     * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
     * @return The enum numeric value on the wire for type.
     */
    @java.lang.Override public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
     * @return The type.
     */
    @java.lang.Override public com.v2ray.core.app.dns.DomainMatchingType getType() {
      @SuppressWarnings("deprecation")
      com.v2ray.core.app.dns.DomainMatchingType result = com.v2ray.core.app.dns.DomainMatchingType.valueOf(type_);
      return result == null ? com.v2ray.core.app.dns.DomainMatchingType.UNRECOGNIZED : result;
    }

    public static final int DOMAIN_FIELD_NUMBER = 2;
    private volatile java.lang.Object domain_;
    /**
     * <code>string domain = 2;</code>
     * @return The domain.
     */
    @java.lang.Override
    public java.lang.String getDomain() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        domain_ = s;
        return s;
      }
    }
    /**
     * <code>string domain = 2;</code>
     * @return The bytes for domain.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDomainBytes() {
      java.lang.Object ref = domain_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        domain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int IP_FIELD_NUMBER = 3;
    private java.util.List<com.google.protobuf.ByteString> ip_;
    /**
     * <code>repeated bytes ip = 3;</code>
     * @return A list containing the ip.
     */
    @java.lang.Override
    public java.util.List<com.google.protobuf.ByteString>
        getIpList() {
      return ip_;
    }
    /**
     * <code>repeated bytes ip = 3;</code>
     * @return The count of ip.
     */
    public int getIpCount() {
      return ip_.size();
    }
    /**
     * <code>repeated bytes ip = 3;</code>
     * @param index The index of the element to return.
     * @return The ip at the given index.
     */
    public com.google.protobuf.ByteString getIp(int index) {
      return ip_.get(index);
    }

    public static final int PROXIED_DOMAIN_FIELD_NUMBER = 4;
    private volatile java.lang.Object proxiedDomain_;
    /**
     * <pre>
     * ProxiedDomain indicates the mapped domain has the same IP address on this
     * domain. V2Ray will use this domain for IP queries.
     * </pre>
     *
     * <code>string proxied_domain = 4;</code>
     * @return The proxiedDomain.
     */
    @java.lang.Override
    public java.lang.String getProxiedDomain() {
      java.lang.Object ref = proxiedDomain_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        proxiedDomain_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * ProxiedDomain indicates the mapped domain has the same IP address on this
     * domain. V2Ray will use this domain for IP queries.
     * </pre>
     *
     * <code>string proxied_domain = 4;</code>
     * @return The bytes for proxiedDomain.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getProxiedDomainBytes() {
      java.lang.Object ref = proxiedDomain_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        proxiedDomain_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (type_ != com.v2ray.core.app.dns.DomainMatchingType.Full.getNumber()) {
        output.writeEnum(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, domain_);
      }
      for (int i = 0; i < ip_.size(); i++) {
        output.writeBytes(3, ip_.get(i));
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(proxiedDomain_)) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 4, proxiedDomain_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (type_ != com.v2ray.core.app.dns.DomainMatchingType.Full.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, type_);
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(domain_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, domain_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < ip_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(ip_.get(i));
        }
        size += dataSize;
        size += 1 * getIpList().size();
      }
      if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(proxiedDomain_)) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(4, proxiedDomain_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.v2ray.core.app.dns.Config.HostMapping)) {
        return super.equals(obj);
      }
      com.v2ray.core.app.dns.Config.HostMapping other = (com.v2ray.core.app.dns.Config.HostMapping) obj;

      if (type_ != other.type_) return false;
      if (!getDomain()
          .equals(other.getDomain())) return false;
      if (!getIpList()
          .equals(other.getIpList())) return false;
      if (!getProxiedDomain()
          .equals(other.getProxiedDomain())) return false;
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      hash = (37 * hash) + DOMAIN_FIELD_NUMBER;
      hash = (53 * hash) + getDomain().hashCode();
      if (getIpCount() > 0) {
        hash = (37 * hash) + IP_FIELD_NUMBER;
        hash = (53 * hash) + getIpList().hashCode();
      }
      hash = (37 * hash) + PROXIED_DOMAIN_FIELD_NUMBER;
      hash = (53 * hash) + getProxiedDomain().hashCode();
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static com.v2ray.core.app.dns.Config.HostMapping parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.v2ray.core.app.dns.Config.HostMapping prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code v2ray.core.app.dns.Config.HostMapping}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:v2ray.core.app.dns.Config.HostMapping)
        com.v2ray.core.app.dns.Config.HostMappingOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostMapping_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostMapping_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.v2ray.core.app.dns.Config.HostMapping.class, com.v2ray.core.app.dns.Config.HostMapping.Builder.class);
      }

      // Construct using com.v2ray.core.app.dns.Config.HostMapping.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        type_ = 0;

        domain_ = "";

        ip_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        proxiedDomain_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostMapping_descriptor;
      }

      @java.lang.Override
      public com.v2ray.core.app.dns.Config.HostMapping getDefaultInstanceForType() {
        return com.v2ray.core.app.dns.Config.HostMapping.getDefaultInstance();
      }

      @java.lang.Override
      public com.v2ray.core.app.dns.Config.HostMapping build() {
        com.v2ray.core.app.dns.Config.HostMapping result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.v2ray.core.app.dns.Config.HostMapping buildPartial() {
        com.v2ray.core.app.dns.Config.HostMapping result = new com.v2ray.core.app.dns.Config.HostMapping(this);
        int from_bitField0_ = bitField0_;
        result.type_ = type_;
        result.domain_ = domain_;
        if (((bitField0_ & 0x00000001) != 0)) {
          ip_ = java.util.Collections.unmodifiableList(ip_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.ip_ = ip_;
        result.proxiedDomain_ = proxiedDomain_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.v2ray.core.app.dns.Config.HostMapping) {
          return mergeFrom((com.v2ray.core.app.dns.Config.HostMapping)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.v2ray.core.app.dns.Config.HostMapping other) {
        if (other == com.v2ray.core.app.dns.Config.HostMapping.getDefaultInstance()) return this;
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (!other.getDomain().isEmpty()) {
          domain_ = other.domain_;
          onChanged();
        }
        if (!other.ip_.isEmpty()) {
          if (ip_.isEmpty()) {
            ip_ = other.ip_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureIpIsMutable();
            ip_.addAll(other.ip_);
          }
          onChanged();
        }
        if (!other.getProxiedDomain().isEmpty()) {
          proxiedDomain_ = other.proxiedDomain_;
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 8: {
                type_ = input.readEnum();

                break;
              } // case 8
              case 18: {
                domain_ = input.readStringRequireUtf8();

                break;
              } // case 18
              case 26: {
                com.google.protobuf.ByteString v = input.readBytes();
                ensureIpIsMutable();
                ip_.add(v);
                break;
              } // case 26
              case 34: {
                proxiedDomain_ = input.readStringRequireUtf8();

                break;
              } // case 34
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int type_ = 0;
      /**
       * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
       * @return The enum numeric value on the wire for type.
       */
      @java.lang.Override public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
       * @return The type.
       */
      @java.lang.Override
      public com.v2ray.core.app.dns.DomainMatchingType getType() {
        @SuppressWarnings("deprecation")
        com.v2ray.core.app.dns.DomainMatchingType result = com.v2ray.core.app.dns.DomainMatchingType.valueOf(type_);
        return result == null ? com.v2ray.core.app.dns.DomainMatchingType.UNRECOGNIZED : result;
      }
      /**
       * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(com.v2ray.core.app.dns.DomainMatchingType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.v2ray.core.app.dns.DomainMatchingType type = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object domain_ = "";
      /**
       * <code>string domain = 2;</code>
       * @return The domain.
       */
      public java.lang.String getDomain() {
        java.lang.Object ref = domain_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          domain_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>string domain = 2;</code>
       * @return The bytes for domain.
       */
      public com.google.protobuf.ByteString
          getDomainBytes() {
        java.lang.Object ref = domain_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          domain_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>string domain = 2;</code>
       * @param value The domain to set.
       * @return This builder for chaining.
       */
      public Builder setDomain(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        domain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>string domain = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDomain() {
        
        domain_ = getDefaultInstance().getDomain();
        onChanged();
        return this;
      }
      /**
       * <code>string domain = 2;</code>
       * @param value The bytes for domain to set.
       * @return This builder for chaining.
       */
      public Builder setDomainBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        domain_ = value;
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> ip_ = java.util.Collections.emptyList();
      private void ensureIpIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          ip_ = new java.util.ArrayList<com.google.protobuf.ByteString>(ip_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @return A list containing the ip.
       */
      public java.util.List<com.google.protobuf.ByteString>
          getIpList() {
        return ((bitField0_ & 0x00000001) != 0) ?
                 java.util.Collections.unmodifiableList(ip_) : ip_;
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @return The count of ip.
       */
      public int getIpCount() {
        return ip_.size();
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @param index The index of the element to return.
       * @return The ip at the given index.
       */
      public com.google.protobuf.ByteString getIp(int index) {
        return ip_.get(index);
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @param index The index to set the value at.
       * @param value The ip to set.
       * @return This builder for chaining.
       */
      public Builder setIp(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureIpIsMutable();
        ip_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @param value The ip to add.
       * @return This builder for chaining.
       */
      public Builder addIp(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureIpIsMutable();
        ip_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @param values The ip to add.
       * @return This builder for chaining.
       */
      public Builder addAllIp(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureIpIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, ip_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes ip = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearIp() {
        ip_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }

      private java.lang.Object proxiedDomain_ = "";
      /**
       * <pre>
       * ProxiedDomain indicates the mapped domain has the same IP address on this
       * domain. V2Ray will use this domain for IP queries.
       * </pre>
       *
       * <code>string proxied_domain = 4;</code>
       * @return The proxiedDomain.
       */
      public java.lang.String getProxiedDomain() {
        java.lang.Object ref = proxiedDomain_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          proxiedDomain_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * ProxiedDomain indicates the mapped domain has the same IP address on this
       * domain. V2Ray will use this domain for IP queries.
       * </pre>
       *
       * <code>string proxied_domain = 4;</code>
       * @return The bytes for proxiedDomain.
       */
      public com.google.protobuf.ByteString
          getProxiedDomainBytes() {
        java.lang.Object ref = proxiedDomain_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          proxiedDomain_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * ProxiedDomain indicates the mapped domain has the same IP address on this
       * domain. V2Ray will use this domain for IP queries.
       * </pre>
       *
       * <code>string proxied_domain = 4;</code>
       * @param value The proxiedDomain to set.
       * @return This builder for chaining.
       */
      public Builder setProxiedDomain(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        proxiedDomain_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ProxiedDomain indicates the mapped domain has the same IP address on this
       * domain. V2Ray will use this domain for IP queries.
       * </pre>
       *
       * <code>string proxied_domain = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearProxiedDomain() {
        
        proxiedDomain_ = getDefaultInstance().getProxiedDomain();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * ProxiedDomain indicates the mapped domain has the same IP address on this
       * domain. V2Ray will use this domain for IP queries.
       * </pre>
       *
       * <code>string proxied_domain = 4;</code>
       * @param value The bytes for proxiedDomain to set.
       * @return This builder for chaining.
       */
      public Builder setProxiedDomainBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        proxiedDomain_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:v2ray.core.app.dns.Config.HostMapping)
    }

    // @@protoc_insertion_point(class_scope:v2ray.core.app.dns.Config.HostMapping)
    private static final com.v2ray.core.app.dns.Config.HostMapping DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.v2ray.core.app.dns.Config.HostMapping();
    }

    public static com.v2ray.core.app.dns.Config.HostMapping getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<HostMapping>
        PARSER = new com.google.protobuf.AbstractParser<HostMapping>() {
      @java.lang.Override
      public HostMapping parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<HostMapping> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<HostMapping> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.v2ray.core.app.dns.Config.HostMapping getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public static final int NAMESERVERS_FIELD_NUMBER = 1;
  private java.util.List<com.v2ray.core.common.net.Endpoint> nameServers_;
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at
   * the moment. A special value 'localhost' as a domain address can be set to
   * use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<com.v2ray.core.common.net.Endpoint> getNameServersList() {
    return nameServers_;
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at
   * the moment. A special value 'localhost' as a domain address can be set to
   * use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public java.util.List<? extends com.v2ray.core.common.net.EndpointOrBuilder> 
      getNameServersOrBuilderList() {
    return nameServers_;
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at
   * the moment. A special value 'localhost' as a domain address can be set to
   * use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public int getNameServersCount() {
    return nameServers_.size();
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at
   * the moment. A special value 'localhost' as a domain address can be set to
   * use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.v2ray.core.common.net.Endpoint getNameServers(int index) {
    return nameServers_.get(index);
  }
  /**
   * <pre>
   * Nameservers used by this DNS. Only traditional UDP servers are support at
   * the moment. A special value 'localhost' as a domain address can be set to
   * use DNS on local system.
   * </pre>
   *
   * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated public com.v2ray.core.common.net.EndpointOrBuilder getNameServersOrBuilder(
      int index) {
    return nameServers_.get(index);
  }

  public static final int NAME_SERVER_FIELD_NUMBER = 5;
  private java.util.List<com.v2ray.core.app.dns.NameServer> nameServer_;
  /**
   * <pre>
   * NameServer list used by this DNS client.
   * </pre>
   *
   * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
   */
  @java.lang.Override
  public java.util.List<com.v2ray.core.app.dns.NameServer> getNameServerList() {
    return nameServer_;
  }
  /**
   * <pre>
   * NameServer list used by this DNS client.
   * </pre>
   *
   * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.v2ray.core.app.dns.NameServerOrBuilder> 
      getNameServerOrBuilderList() {
    return nameServer_;
  }
  /**
   * <pre>
   * NameServer list used by this DNS client.
   * </pre>
   *
   * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
   */
  @java.lang.Override
  public int getNameServerCount() {
    return nameServer_.size();
  }
  /**
   * <pre>
   * NameServer list used by this DNS client.
   * </pre>
   *
   * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
   */
  @java.lang.Override
  public com.v2ray.core.app.dns.NameServer getNameServer(int index) {
    return nameServer_.get(index);
  }
  /**
   * <pre>
   * NameServer list used by this DNS client.
   * </pre>
   *
   * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
   */
  @java.lang.Override
  public com.v2ray.core.app.dns.NameServerOrBuilder getNameServerOrBuilder(
      int index) {
    return nameServer_.get(index);
  }

  public static final int HOSTS_FIELD_NUMBER = 2;
  private static final class HostsDefaultEntryHolder {
    static final com.google.protobuf.MapEntry<
        java.lang.String, com.v2ray.core.common.net.IPOrDomain> defaultEntry =
            com.google.protobuf.MapEntry
            .<java.lang.String, com.v2ray.core.common.net.IPOrDomain>newDefaultInstance(
                com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_HostsEntry_descriptor, 
                com.google.protobuf.WireFormat.FieldType.STRING,
                "",
                com.google.protobuf.WireFormat.FieldType.MESSAGE,
                com.v2ray.core.common.net.IPOrDomain.getDefaultInstance());
  }
  private com.google.protobuf.MapField<
      java.lang.String, com.v2ray.core.common.net.IPOrDomain> hosts_;
  private com.google.protobuf.MapField<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
  internalGetHosts() {
    if (hosts_ == null) {
      return com.google.protobuf.MapField.emptyMapField(
          HostsDefaultEntryHolder.defaultEntry);
    }
    return hosts_;
  }
  @java.lang.Deprecated 
  public int getHostsCount() {
    return internalGetHosts().getMap().size();
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * Deprecated. Use static_hosts.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
   */
  @java.lang.Deprecated 
  @java.lang.Override
  public boolean containsHosts(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    return internalGetHosts().getMap().containsKey(key);
  }
  /**
   * Use {@link #getHostsMap()} instead.
   */
  @java.lang.Override
  @java.lang.Deprecated
  public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHosts() {
    return getHostsMap();
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * Deprecated. Use static_hosts.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated 
  public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHostsMap() {
    return internalGetHosts().getMap();
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * Deprecated. Use static_hosts.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated 
  public com.v2ray.core.common.net.IPOrDomain getHostsOrDefault(
      java.lang.String key,
      com.v2ray.core.common.net.IPOrDomain defaultValue) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
        internalGetHosts().getMap();
    return map.containsKey(key) ? map.get(key) : defaultValue;
  }
  /**
   * <pre>
   * Static hosts. Domain to IP.
   * Deprecated. Use static_hosts.
   * </pre>
   *
   * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
   */
  @java.lang.Override
  @java.lang.Deprecated 
  public com.v2ray.core.common.net.IPOrDomain getHostsOrThrow(
      java.lang.String key) {
    if (key == null) { throw new NullPointerException("map key"); }
    java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
        internalGetHosts().getMap();
    if (!map.containsKey(key)) {
      throw new java.lang.IllegalArgumentException();
    }
    return map.get(key);
  }

  public static final int CLIENT_IP_FIELD_NUMBER = 3;
  private com.google.protobuf.ByteString clientIp_;
  /**
   * <pre>
   * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
   * (IPv6).
   * </pre>
   *
   * <code>bytes client_ip = 3;</code>
   * @return The clientIp.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString getClientIp() {
    return clientIp_;
  }

  public static final int STATIC_HOSTS_FIELD_NUMBER = 4;
  private java.util.List<com.v2ray.core.app.dns.Config.HostMapping> staticHosts_;
  /**
   * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
   */
  @java.lang.Override
  public java.util.List<com.v2ray.core.app.dns.Config.HostMapping> getStaticHostsList() {
    return staticHosts_;
  }
  /**
   * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
   */
  @java.lang.Override
  public java.util.List<? extends com.v2ray.core.app.dns.Config.HostMappingOrBuilder> 
      getStaticHostsOrBuilderList() {
    return staticHosts_;
  }
  /**
   * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
   */
  @java.lang.Override
  public int getStaticHostsCount() {
    return staticHosts_.size();
  }
  /**
   * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
   */
  @java.lang.Override
  public com.v2ray.core.app.dns.Config.HostMapping getStaticHosts(int index) {
    return staticHosts_.get(index);
  }
  /**
   * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
   */
  @java.lang.Override
  public com.v2ray.core.app.dns.Config.HostMappingOrBuilder getStaticHostsOrBuilder(
      int index) {
    return staticHosts_.get(index);
  }

  public static final int TAG_FIELD_NUMBER = 6;
  private volatile java.lang.Object tag_;
  /**
   * <pre>
   * Tag is the inbound tag of DNS client.
   * </pre>
   *
   * <code>string tag = 6;</code>
   * @return The tag.
   */
  @java.lang.Override
  public java.lang.String getTag() {
    java.lang.Object ref = tag_;
    if (ref instanceof java.lang.String) {
      return (java.lang.String) ref;
    } else {
      com.google.protobuf.ByteString bs = 
          (com.google.protobuf.ByteString) ref;
      java.lang.String s = bs.toStringUtf8();
      tag_ = s;
      return s;
    }
  }
  /**
   * <pre>
   * Tag is the inbound tag of DNS client.
   * </pre>
   *
   * <code>string tag = 6;</code>
   * @return The bytes for tag.
   */
  @java.lang.Override
  public com.google.protobuf.ByteString
      getTagBytes() {
    java.lang.Object ref = tag_;
    if (ref instanceof java.lang.String) {
      com.google.protobuf.ByteString b = 
          com.google.protobuf.ByteString.copyFromUtf8(
              (java.lang.String) ref);
      tag_ = b;
      return b;
    } else {
      return (com.google.protobuf.ByteString) ref;
    }
  }

  public static final int DISABLECACHE_FIELD_NUMBER = 8;
  private boolean disableCache_;
  /**
   * <pre>
   * DisableCache disables DNS cache
   * </pre>
   *
   * <code>bool disableCache = 8;</code>
   * @return The disableCache.
   */
  @java.lang.Override
  public boolean getDisableCache() {
    return disableCache_;
  }

  public static final int QUERY_STRATEGY_FIELD_NUMBER = 9;
  private int queryStrategy_;
  /**
   * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
   * @return The enum numeric value on the wire for queryStrategy.
   */
  @java.lang.Override public int getQueryStrategyValue() {
    return queryStrategy_;
  }
  /**
   * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
   * @return The queryStrategy.
   */
  @java.lang.Override public com.v2ray.core.app.dns.QueryStrategy getQueryStrategy() {
    @SuppressWarnings("deprecation")
    com.v2ray.core.app.dns.QueryStrategy result = com.v2ray.core.app.dns.QueryStrategy.valueOf(queryStrategy_);
    return result == null ? com.v2ray.core.app.dns.QueryStrategy.UNRECOGNIZED : result;
  }

  public static final int DISABLEFALLBACK_FIELD_NUMBER = 10;
  private boolean disableFallback_;
  /**
   * <code>bool disableFallback = 10;</code>
   * @return The disableFallback.
   */
  @java.lang.Override
  public boolean getDisableFallback() {
    return disableFallback_;
  }

  public static final int DISABLEFALLBACKIFMATCH_FIELD_NUMBER = 11;
  private boolean disableFallbackIfMatch_;
  /**
   * <code>bool disableFallbackIfMatch = 11;</code>
   * @return The disableFallbackIfMatch.
   */
  @java.lang.Override
  public boolean getDisableFallbackIfMatch() {
    return disableFallbackIfMatch_;
  }

  private byte memoizedIsInitialized = -1;
  @java.lang.Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @java.lang.Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < nameServers_.size(); i++) {
      output.writeMessage(1, nameServers_.get(i));
    }
    com.google.protobuf.GeneratedMessageV3
      .serializeStringMapTo(
        output,
        internalGetHosts(),
        HostsDefaultEntryHolder.defaultEntry,
        2);
    if (!clientIp_.isEmpty()) {
      output.writeBytes(3, clientIp_);
    }
    for (int i = 0; i < staticHosts_.size(); i++) {
      output.writeMessage(4, staticHosts_.get(i));
    }
    for (int i = 0; i < nameServer_.size(); i++) {
      output.writeMessage(5, nameServer_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tag_)) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 6, tag_);
    }
    if (disableCache_ != false) {
      output.writeBool(8, disableCache_);
    }
    if (queryStrategy_ != com.v2ray.core.app.dns.QueryStrategy.USE_IP.getNumber()) {
      output.writeEnum(9, queryStrategy_);
    }
    if (disableFallback_ != false) {
      output.writeBool(10, disableFallback_);
    }
    if (disableFallbackIfMatch_ != false) {
      output.writeBool(11, disableFallbackIfMatch_);
    }
    getUnknownFields().writeTo(output);
  }

  @java.lang.Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    for (int i = 0; i < nameServers_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(1, nameServers_.get(i));
    }
    for (java.util.Map.Entry<java.lang.String, com.v2ray.core.common.net.IPOrDomain> entry
         : internalGetHosts().getMap().entrySet()) {
      com.google.protobuf.MapEntry<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
      hosts__ = HostsDefaultEntryHolder.defaultEntry.newBuilderForType()
          .setKey(entry.getKey())
          .setValue(entry.getValue())
          .build();
      size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, hosts__);
    }
    if (!clientIp_.isEmpty()) {
      size += com.google.protobuf.CodedOutputStream
        .computeBytesSize(3, clientIp_);
    }
    for (int i = 0; i < staticHosts_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(4, staticHosts_.get(i));
    }
    for (int i = 0; i < nameServer_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(5, nameServer_.get(i));
    }
    if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tag_)) {
      size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, tag_);
    }
    if (disableCache_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(8, disableCache_);
    }
    if (queryStrategy_ != com.v2ray.core.app.dns.QueryStrategy.USE_IP.getNumber()) {
      size += com.google.protobuf.CodedOutputStream
        .computeEnumSize(9, queryStrategy_);
    }
    if (disableFallback_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(10, disableFallback_);
    }
    if (disableFallbackIfMatch_ != false) {
      size += com.google.protobuf.CodedOutputStream
        .computeBoolSize(11, disableFallbackIfMatch_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @java.lang.Override
  public boolean equals(final java.lang.Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof com.v2ray.core.app.dns.Config)) {
      return super.equals(obj);
    }
    com.v2ray.core.app.dns.Config other = (com.v2ray.core.app.dns.Config) obj;

    if (!getNameServersList()
        .equals(other.getNameServersList())) return false;
    if (!getNameServerList()
        .equals(other.getNameServerList())) return false;
    if (!internalGetHosts().equals(
        other.internalGetHosts())) return false;
    if (!getClientIp()
        .equals(other.getClientIp())) return false;
    if (!getStaticHostsList()
        .equals(other.getStaticHostsList())) return false;
    if (!getTag()
        .equals(other.getTag())) return false;
    if (getDisableCache()
        != other.getDisableCache()) return false;
    if (queryStrategy_ != other.queryStrategy_) return false;
    if (getDisableFallback()
        != other.getDisableFallback()) return false;
    if (getDisableFallbackIfMatch()
        != other.getDisableFallbackIfMatch()) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @java.lang.Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getNameServersCount() > 0) {
      hash = (37 * hash) + NAMESERVERS_FIELD_NUMBER;
      hash = (53 * hash) + getNameServersList().hashCode();
    }
    if (getNameServerCount() > 0) {
      hash = (37 * hash) + NAME_SERVER_FIELD_NUMBER;
      hash = (53 * hash) + getNameServerList().hashCode();
    }
    if (!internalGetHosts().getMap().isEmpty()) {
      hash = (37 * hash) + HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + internalGetHosts().hashCode();
    }
    hash = (37 * hash) + CLIENT_IP_FIELD_NUMBER;
    hash = (53 * hash) + getClientIp().hashCode();
    if (getStaticHostsCount() > 0) {
      hash = (37 * hash) + STATIC_HOSTS_FIELD_NUMBER;
      hash = (53 * hash) + getStaticHostsList().hashCode();
    }
    hash = (37 * hash) + TAG_FIELD_NUMBER;
    hash = (53 * hash) + getTag().hashCode();
    hash = (37 * hash) + DISABLECACHE_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDisableCache());
    hash = (37 * hash) + QUERY_STRATEGY_FIELD_NUMBER;
    hash = (53 * hash) + queryStrategy_;
    hash = (37 * hash) + DISABLEFALLBACK_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDisableFallback());
    hash = (37 * hash) + DISABLEFALLBACKIFMATCH_FIELD_NUMBER;
    hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
        getDisableFallbackIfMatch());
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static com.v2ray.core.app.dns.Config parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static com.v2ray.core.app.dns.Config parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static com.v2ray.core.app.dns.Config parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @java.lang.Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(com.v2ray.core.app.dns.Config prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @java.lang.Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @java.lang.Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code v2ray.core.app.dns.Config}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:v2ray.core.app.dns.Config)
      com.v2ray.core.app.dns.ConfigOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_descriptor;
    }

    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetHosts();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @SuppressWarnings({"rawtypes"})
    protected com.google.protobuf.MapField internalGetMutableMapField(
        int number) {
      switch (number) {
        case 2:
          return internalGetMutableHosts();
        default:
          throw new RuntimeException(
              "Invalid map field number: " + number);
      }
    }
    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.v2ray.core.app.dns.Config.class, com.v2ray.core.app.dns.Config.Builder.class);
    }

    // Construct using com.v2ray.core.app.dns.Config.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @java.lang.Override
    public Builder clear() {
      super.clear();
      if (nameServersBuilder_ == null) {
        nameServers_ = java.util.Collections.emptyList();
      } else {
        nameServers_ = null;
        nameServersBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000001);
      if (nameServerBuilder_ == null) {
        nameServer_ = java.util.Collections.emptyList();
      } else {
        nameServer_ = null;
        nameServerBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      internalGetMutableHosts().clear();
      clientIp_ = com.google.protobuf.ByteString.EMPTY;

      if (staticHostsBuilder_ == null) {
        staticHosts_ = java.util.Collections.emptyList();
      } else {
        staticHosts_ = null;
        staticHostsBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000008);
      tag_ = "";

      disableCache_ = false;

      queryStrategy_ = 0;

      disableFallback_ = false;

      disableFallbackIfMatch_ = false;

      return this;
    }

    @java.lang.Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return com.v2ray.core.app.dns.ConfigOuterClass.internal_static_v2ray_core_app_dns_Config_descriptor;
    }

    @java.lang.Override
    public com.v2ray.core.app.dns.Config getDefaultInstanceForType() {
      return com.v2ray.core.app.dns.Config.getDefaultInstance();
    }

    @java.lang.Override
    public com.v2ray.core.app.dns.Config build() {
      com.v2ray.core.app.dns.Config result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @java.lang.Override
    public com.v2ray.core.app.dns.Config buildPartial() {
      com.v2ray.core.app.dns.Config result = new com.v2ray.core.app.dns.Config(this);
      int from_bitField0_ = bitField0_;
      if (nameServersBuilder_ == null) {
        if (((bitField0_ & 0x00000001) != 0)) {
          nameServers_ = java.util.Collections.unmodifiableList(nameServers_);
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.nameServers_ = nameServers_;
      } else {
        result.nameServers_ = nameServersBuilder_.build();
      }
      if (nameServerBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          nameServer_ = java.util.Collections.unmodifiableList(nameServer_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.nameServer_ = nameServer_;
      } else {
        result.nameServer_ = nameServerBuilder_.build();
      }
      result.hosts_ = internalGetHosts();
      result.hosts_.makeImmutable();
      result.clientIp_ = clientIp_;
      if (staticHostsBuilder_ == null) {
        if (((bitField0_ & 0x00000008) != 0)) {
          staticHosts_ = java.util.Collections.unmodifiableList(staticHosts_);
          bitField0_ = (bitField0_ & ~0x00000008);
        }
        result.staticHosts_ = staticHosts_;
      } else {
        result.staticHosts_ = staticHostsBuilder_.build();
      }
      result.tag_ = tag_;
      result.disableCache_ = disableCache_;
      result.queryStrategy_ = queryStrategy_;
      result.disableFallback_ = disableFallback_;
      result.disableFallbackIfMatch_ = disableFallbackIfMatch_;
      onBuilt();
      return result;
    }

    @java.lang.Override
    public Builder clone() {
      return super.clone();
    }
    @java.lang.Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.setField(field, value);
    }
    @java.lang.Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @java.lang.Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @java.lang.Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, java.lang.Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @java.lang.Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        java.lang.Object value) {
      return super.addRepeatedField(field, value);
    }
    @java.lang.Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof com.v2ray.core.app.dns.Config) {
        return mergeFrom((com.v2ray.core.app.dns.Config)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(com.v2ray.core.app.dns.Config other) {
      if (other == com.v2ray.core.app.dns.Config.getDefaultInstance()) return this;
      if (nameServersBuilder_ == null) {
        if (!other.nameServers_.isEmpty()) {
          if (nameServers_.isEmpty()) {
            nameServers_ = other.nameServers_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureNameServersIsMutable();
            nameServers_.addAll(other.nameServers_);
          }
          onChanged();
        }
      } else {
        if (!other.nameServers_.isEmpty()) {
          if (nameServersBuilder_.isEmpty()) {
            nameServersBuilder_.dispose();
            nameServersBuilder_ = null;
            nameServers_ = other.nameServers_;
            bitField0_ = (bitField0_ & ~0x00000001);
            nameServersBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNameServersFieldBuilder() : null;
          } else {
            nameServersBuilder_.addAllMessages(other.nameServers_);
          }
        }
      }
      if (nameServerBuilder_ == null) {
        if (!other.nameServer_.isEmpty()) {
          if (nameServer_.isEmpty()) {
            nameServer_ = other.nameServer_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureNameServerIsMutable();
            nameServer_.addAll(other.nameServer_);
          }
          onChanged();
        }
      } else {
        if (!other.nameServer_.isEmpty()) {
          if (nameServerBuilder_.isEmpty()) {
            nameServerBuilder_.dispose();
            nameServerBuilder_ = null;
            nameServer_ = other.nameServer_;
            bitField0_ = (bitField0_ & ~0x00000002);
            nameServerBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNameServerFieldBuilder() : null;
          } else {
            nameServerBuilder_.addAllMessages(other.nameServer_);
          }
        }
      }
      internalGetMutableHosts().mergeFrom(
          other.internalGetHosts());
      if (other.getClientIp() != com.google.protobuf.ByteString.EMPTY) {
        setClientIp(other.getClientIp());
      }
      if (staticHostsBuilder_ == null) {
        if (!other.staticHosts_.isEmpty()) {
          if (staticHosts_.isEmpty()) {
            staticHosts_ = other.staticHosts_;
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            ensureStaticHostsIsMutable();
            staticHosts_.addAll(other.staticHosts_);
          }
          onChanged();
        }
      } else {
        if (!other.staticHosts_.isEmpty()) {
          if (staticHostsBuilder_.isEmpty()) {
            staticHostsBuilder_.dispose();
            staticHostsBuilder_ = null;
            staticHosts_ = other.staticHosts_;
            bitField0_ = (bitField0_ & ~0x00000008);
            staticHostsBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getStaticHostsFieldBuilder() : null;
          } else {
            staticHostsBuilder_.addAllMessages(other.staticHosts_);
          }
        }
      }
      if (!other.getTag().isEmpty()) {
        tag_ = other.tag_;
        onChanged();
      }
      if (other.getDisableCache() != false) {
        setDisableCache(other.getDisableCache());
      }
      if (other.queryStrategy_ != 0) {
        setQueryStrategyValue(other.getQueryStrategyValue());
      }
      if (other.getDisableFallback() != false) {
        setDisableFallback(other.getDisableFallback());
      }
      if (other.getDisableFallbackIfMatch() != false) {
        setDisableFallbackIfMatch(other.getDisableFallbackIfMatch());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @java.lang.Override
    public final boolean isInitialized() {
      return true;
    }

    @java.lang.Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              com.v2ray.core.common.net.Endpoint m =
                  input.readMessage(
                      com.v2ray.core.common.net.Endpoint.parser(),
                      extensionRegistry);
              if (nameServersBuilder_ == null) {
                ensureNameServersIsMutable();
                nameServers_.add(m);
              } else {
                nameServersBuilder_.addMessage(m);
              }
              break;
            } // case 10
            case 18: {
              com.google.protobuf.MapEntry<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
              hosts__ = input.readMessage(
                  HostsDefaultEntryHolder.defaultEntry.getParserForType(), extensionRegistry);
              internalGetMutableHosts().getMutableMap().put(
                  hosts__.getKey(), hosts__.getValue());
              break;
            } // case 18
            case 26: {
              clientIp_ = input.readBytes();

              break;
            } // case 26
            case 34: {
              com.v2ray.core.app.dns.Config.HostMapping m =
                  input.readMessage(
                      com.v2ray.core.app.dns.Config.HostMapping.parser(),
                      extensionRegistry);
              if (staticHostsBuilder_ == null) {
                ensureStaticHostsIsMutable();
                staticHosts_.add(m);
              } else {
                staticHostsBuilder_.addMessage(m);
              }
              break;
            } // case 34
            case 42: {
              com.v2ray.core.app.dns.NameServer m =
                  input.readMessage(
                      com.v2ray.core.app.dns.NameServer.parser(),
                      extensionRegistry);
              if (nameServerBuilder_ == null) {
                ensureNameServerIsMutable();
                nameServer_.add(m);
              } else {
                nameServerBuilder_.addMessage(m);
              }
              break;
            } // case 42
            case 50: {
              tag_ = input.readStringRequireUtf8();

              break;
            } // case 50
            case 64: {
              disableCache_ = input.readBool();

              break;
            } // case 64
            case 72: {
              queryStrategy_ = input.readEnum();

              break;
            } // case 72
            case 80: {
              disableFallback_ = input.readBool();

              break;
            } // case 80
            case 88: {
              disableFallbackIfMatch_ = input.readBool();

              break;
            } // case 88
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private java.util.List<com.v2ray.core.common.net.Endpoint> nameServers_ =
      java.util.Collections.emptyList();
    private void ensureNameServersIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        nameServers_ = new java.util.ArrayList<com.v2ray.core.common.net.Endpoint>(nameServers_);
        bitField0_ |= 0x00000001;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.common.net.Endpoint, com.v2ray.core.common.net.Endpoint.Builder, com.v2ray.core.common.net.EndpointOrBuilder> nameServersBuilder_;

    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<com.v2ray.core.common.net.Endpoint> getNameServersList() {
      if (nameServersBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nameServers_);
      } else {
        return nameServersBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public int getNameServersCount() {
      if (nameServersBuilder_ == null) {
        return nameServers_.size();
      } else {
        return nameServersBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.v2ray.core.common.net.Endpoint getNameServers(int index) {
      if (nameServersBuilder_ == null) {
        return nameServers_.get(index);
      } else {
        return nameServersBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setNameServers(
        int index, com.v2ray.core.common.net.Endpoint value) {
      if (nameServersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServersIsMutable();
        nameServers_.set(index, value);
        onChanged();
      } else {
        nameServersBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder setNameServers(
        int index, com.v2ray.core.common.net.Endpoint.Builder builderForValue) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.set(index, builderForValue.build());
        onChanged();
      } else {
        nameServersBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addNameServers(com.v2ray.core.common.net.Endpoint value) {
      if (nameServersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServersIsMutable();
        nameServers_.add(value);
        onChanged();
      } else {
        nameServersBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addNameServers(
        int index, com.v2ray.core.common.net.Endpoint value) {
      if (nameServersBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServersIsMutable();
        nameServers_.add(index, value);
        onChanged();
      } else {
        nameServersBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addNameServers(
        com.v2ray.core.common.net.Endpoint.Builder builderForValue) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.add(builderForValue.build());
        onChanged();
      } else {
        nameServersBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addNameServers(
        int index, com.v2ray.core.common.net.Endpoint.Builder builderForValue) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.add(index, builderForValue.build());
        onChanged();
      } else {
        nameServersBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder addAllNameServers(
        java.lang.Iterable<? extends com.v2ray.core.common.net.Endpoint> values) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nameServers_);
        onChanged();
      } else {
        nameServersBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder clearNameServers() {
      if (nameServersBuilder_ == null) {
        nameServers_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
      } else {
        nameServersBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder removeNameServers(int index) {
      if (nameServersBuilder_ == null) {
        ensureNameServersIsMutable();
        nameServers_.remove(index);
        onChanged();
      } else {
        nameServersBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.v2ray.core.common.net.Endpoint.Builder getNameServersBuilder(
        int index) {
      return getNameServersFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.v2ray.core.common.net.EndpointOrBuilder getNameServersOrBuilder(
        int index) {
      if (nameServersBuilder_ == null) {
        return nameServers_.get(index);  } else {
        return nameServersBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<? extends com.v2ray.core.common.net.EndpointOrBuilder> 
         getNameServersOrBuilderList() {
      if (nameServersBuilder_ != null) {
        return nameServersBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nameServers_);
      }
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.v2ray.core.common.net.Endpoint.Builder addNameServersBuilder() {
      return getNameServersFieldBuilder().addBuilder(
          com.v2ray.core.common.net.Endpoint.getDefaultInstance());
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public com.v2ray.core.common.net.Endpoint.Builder addNameServersBuilder(
        int index) {
      return getNameServersFieldBuilder().addBuilder(
          index, com.v2ray.core.common.net.Endpoint.getDefaultInstance());
    }
    /**
     * <pre>
     * Nameservers used by this DNS. Only traditional UDP servers are support at
     * the moment. A special value 'localhost' as a domain address can be set to
     * use DNS on local system.
     * </pre>
     *
     * <code>repeated .v2ray.core.common.net.Endpoint NameServers = 1 [deprecated = true];</code>
     */
    @java.lang.Deprecated public java.util.List<com.v2ray.core.common.net.Endpoint.Builder> 
         getNameServersBuilderList() {
      return getNameServersFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.common.net.Endpoint, com.v2ray.core.common.net.Endpoint.Builder, com.v2ray.core.common.net.EndpointOrBuilder> 
        getNameServersFieldBuilder() {
      if (nameServersBuilder_ == null) {
        nameServersBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.v2ray.core.common.net.Endpoint, com.v2ray.core.common.net.Endpoint.Builder, com.v2ray.core.common.net.EndpointOrBuilder>(
                nameServers_,
                ((bitField0_ & 0x00000001) != 0),
                getParentForChildren(),
                isClean());
        nameServers_ = null;
      }
      return nameServersBuilder_;
    }

    private java.util.List<com.v2ray.core.app.dns.NameServer> nameServer_ =
      java.util.Collections.emptyList();
    private void ensureNameServerIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        nameServer_ = new java.util.ArrayList<com.v2ray.core.app.dns.NameServer>(nameServer_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.app.dns.NameServer, com.v2ray.core.app.dns.NameServer.Builder, com.v2ray.core.app.dns.NameServerOrBuilder> nameServerBuilder_;

    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public java.util.List<com.v2ray.core.app.dns.NameServer> getNameServerList() {
      if (nameServerBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nameServer_);
      } else {
        return nameServerBuilder_.getMessageList();
      }
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public int getNameServerCount() {
      if (nameServerBuilder_ == null) {
        return nameServer_.size();
      } else {
        return nameServerBuilder_.getCount();
      }
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public com.v2ray.core.app.dns.NameServer getNameServer(int index) {
      if (nameServerBuilder_ == null) {
        return nameServer_.get(index);
      } else {
        return nameServerBuilder_.getMessage(index);
      }
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder setNameServer(
        int index, com.v2ray.core.app.dns.NameServer value) {
      if (nameServerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServerIsMutable();
        nameServer_.set(index, value);
        onChanged();
      } else {
        nameServerBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder setNameServer(
        int index, com.v2ray.core.app.dns.NameServer.Builder builderForValue) {
      if (nameServerBuilder_ == null) {
        ensureNameServerIsMutable();
        nameServer_.set(index, builderForValue.build());
        onChanged();
      } else {
        nameServerBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder addNameServer(com.v2ray.core.app.dns.NameServer value) {
      if (nameServerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServerIsMutable();
        nameServer_.add(value);
        onChanged();
      } else {
        nameServerBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder addNameServer(
        int index, com.v2ray.core.app.dns.NameServer value) {
      if (nameServerBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNameServerIsMutable();
        nameServer_.add(index, value);
        onChanged();
      } else {
        nameServerBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder addNameServer(
        com.v2ray.core.app.dns.NameServer.Builder builderForValue) {
      if (nameServerBuilder_ == null) {
        ensureNameServerIsMutable();
        nameServer_.add(builderForValue.build());
        onChanged();
      } else {
        nameServerBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder addNameServer(
        int index, com.v2ray.core.app.dns.NameServer.Builder builderForValue) {
      if (nameServerBuilder_ == null) {
        ensureNameServerIsMutable();
        nameServer_.add(index, builderForValue.build());
        onChanged();
      } else {
        nameServerBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder addAllNameServer(
        java.lang.Iterable<? extends com.v2ray.core.app.dns.NameServer> values) {
      if (nameServerBuilder_ == null) {
        ensureNameServerIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nameServer_);
        onChanged();
      } else {
        nameServerBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder clearNameServer() {
      if (nameServerBuilder_ == null) {
        nameServer_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        nameServerBuilder_.clear();
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public Builder removeNameServer(int index) {
      if (nameServerBuilder_ == null) {
        ensureNameServerIsMutable();
        nameServer_.remove(index);
        onChanged();
      } else {
        nameServerBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public com.v2ray.core.app.dns.NameServer.Builder getNameServerBuilder(
        int index) {
      return getNameServerFieldBuilder().getBuilder(index);
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public com.v2ray.core.app.dns.NameServerOrBuilder getNameServerOrBuilder(
        int index) {
      if (nameServerBuilder_ == null) {
        return nameServer_.get(index);  } else {
        return nameServerBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public java.util.List<? extends com.v2ray.core.app.dns.NameServerOrBuilder> 
         getNameServerOrBuilderList() {
      if (nameServerBuilder_ != null) {
        return nameServerBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nameServer_);
      }
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public com.v2ray.core.app.dns.NameServer.Builder addNameServerBuilder() {
      return getNameServerFieldBuilder().addBuilder(
          com.v2ray.core.app.dns.NameServer.getDefaultInstance());
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public com.v2ray.core.app.dns.NameServer.Builder addNameServerBuilder(
        int index) {
      return getNameServerFieldBuilder().addBuilder(
          index, com.v2ray.core.app.dns.NameServer.getDefaultInstance());
    }
    /**
     * <pre>
     * NameServer list used by this DNS client.
     * </pre>
     *
     * <code>repeated .v2ray.core.app.dns.NameServer name_server = 5;</code>
     */
    public java.util.List<com.v2ray.core.app.dns.NameServer.Builder> 
         getNameServerBuilderList() {
      return getNameServerFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.app.dns.NameServer, com.v2ray.core.app.dns.NameServer.Builder, com.v2ray.core.app.dns.NameServerOrBuilder> 
        getNameServerFieldBuilder() {
      if (nameServerBuilder_ == null) {
        nameServerBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.v2ray.core.app.dns.NameServer, com.v2ray.core.app.dns.NameServer.Builder, com.v2ray.core.app.dns.NameServerOrBuilder>(
                nameServer_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        nameServer_ = null;
      }
      return nameServerBuilder_;
    }

    private com.google.protobuf.MapField<
        java.lang.String, com.v2ray.core.common.net.IPOrDomain> hosts_;
    private com.google.protobuf.MapField<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
    internalGetHosts() {
      if (hosts_ == null) {
        return com.google.protobuf.MapField.emptyMapField(
            HostsDefaultEntryHolder.defaultEntry);
      }
      return hosts_;
    }
    private com.google.protobuf.MapField<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
    internalGetMutableHosts() {
      onChanged();;
      if (hosts_ == null) {
        hosts_ = com.google.protobuf.MapField.newMapField(
            HostsDefaultEntryHolder.defaultEntry);
      }
      if (!hosts_.isMutable()) {
        hosts_ = hosts_.copy();
      }
      return hosts_;
    }
    @java.lang.Deprecated 
    public int getHostsCount() {
      return internalGetHosts().getMap().size();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated 
    @java.lang.Override
    public boolean containsHosts(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      return internalGetHosts().getMap().containsKey(key);
    }
    /**
     * Use {@link #getHostsMap()} instead.
     */
    @java.lang.Override
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHosts() {
      return getHostsMap();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated 
    public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> getHostsMap() {
      return internalGetHosts().getMap();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated 
    public com.v2ray.core.common.net.IPOrDomain getHostsOrDefault(
        java.lang.String key,
        com.v2ray.core.common.net.IPOrDomain defaultValue) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
          internalGetHosts().getMap();
      return map.containsKey(key) ? map.get(key) : defaultValue;
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Override
    @java.lang.Deprecated 
    public com.v2ray.core.common.net.IPOrDomain getHostsOrThrow(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> map =
          internalGetHosts().getMap();
      if (!map.containsKey(key)) {
        throw new java.lang.IllegalArgumentException();
      }
      return map.get(key);
    }
    @java.lang.Deprecated 
    public Builder clearHosts() {
      internalGetMutableHosts().getMutableMap()
          .clear();
      return this;
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated 
    public Builder removeHosts(
        java.lang.String key) {
      if (key == null) { throw new NullPointerException("map key"); }
      internalGetMutableHosts().getMutableMap()
          .remove(key);
      return this;
    }
    /**
     * Use alternate mutation accessors instead.
     */
    @java.lang.Deprecated
    public java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain>
    getMutableHosts() {
      return internalGetMutableHosts().getMutableMap();
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated public Builder putHosts(
        java.lang.String key,
        com.v2ray.core.common.net.IPOrDomain value) {
      if (key == null) { throw new NullPointerException("map key"); }
      if (value == null) {
  throw new NullPointerException("map value");
}

      internalGetMutableHosts().getMutableMap()
          .put(key, value);
      return this;
    }
    /**
     * <pre>
     * Static hosts. Domain to IP.
     * Deprecated. Use static_hosts.
     * </pre>
     *
     * <code>map&lt;string, .v2ray.core.common.net.IPOrDomain&gt; Hosts = 2 [deprecated = true];</code>
     */
    @java.lang.Deprecated 
    public Builder putAllHosts(
        java.util.Map<java.lang.String, com.v2ray.core.common.net.IPOrDomain> values) {
      internalGetMutableHosts().getMutableMap()
          .putAll(values);
      return this;
    }

    private com.google.protobuf.ByteString clientIp_ = com.google.protobuf.ByteString.EMPTY;
    /**
     * <pre>
     * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     * (IPv6).
     * </pre>
     *
     * <code>bytes client_ip = 3;</code>
     * @return The clientIp.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString getClientIp() {
      return clientIp_;
    }
    /**
     * <pre>
     * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     * (IPv6).
     * </pre>
     *
     * <code>bytes client_ip = 3;</code>
     * @param value The clientIp to set.
     * @return This builder for chaining.
     */
    public Builder setClientIp(com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      clientIp_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Client IP for EDNS client subnet. Must be 4 bytes (IPv4) or 16 bytes
     * (IPv6).
     * </pre>
     *
     * <code>bytes client_ip = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearClientIp() {
      
      clientIp_ = getDefaultInstance().getClientIp();
      onChanged();
      return this;
    }

    private java.util.List<com.v2ray.core.app.dns.Config.HostMapping> staticHosts_ =
      java.util.Collections.emptyList();
    private void ensureStaticHostsIsMutable() {
      if (!((bitField0_ & 0x00000008) != 0)) {
        staticHosts_ = new java.util.ArrayList<com.v2ray.core.app.dns.Config.HostMapping>(staticHosts_);
        bitField0_ |= 0x00000008;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.app.dns.Config.HostMapping, com.v2ray.core.app.dns.Config.HostMapping.Builder, com.v2ray.core.app.dns.Config.HostMappingOrBuilder> staticHostsBuilder_;

    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public java.util.List<com.v2ray.core.app.dns.Config.HostMapping> getStaticHostsList() {
      if (staticHostsBuilder_ == null) {
        return java.util.Collections.unmodifiableList(staticHosts_);
      } else {
        return staticHostsBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public int getStaticHostsCount() {
      if (staticHostsBuilder_ == null) {
        return staticHosts_.size();
      } else {
        return staticHostsBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public com.v2ray.core.app.dns.Config.HostMapping getStaticHosts(int index) {
      if (staticHostsBuilder_ == null) {
        return staticHosts_.get(index);
      } else {
        return staticHostsBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder setStaticHosts(
        int index, com.v2ray.core.app.dns.Config.HostMapping value) {
      if (staticHostsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStaticHostsIsMutable();
        staticHosts_.set(index, value);
        onChanged();
      } else {
        staticHostsBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder setStaticHosts(
        int index, com.v2ray.core.app.dns.Config.HostMapping.Builder builderForValue) {
      if (staticHostsBuilder_ == null) {
        ensureStaticHostsIsMutable();
        staticHosts_.set(index, builderForValue.build());
        onChanged();
      } else {
        staticHostsBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder addStaticHosts(com.v2ray.core.app.dns.Config.HostMapping value) {
      if (staticHostsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStaticHostsIsMutable();
        staticHosts_.add(value);
        onChanged();
      } else {
        staticHostsBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder addStaticHosts(
        int index, com.v2ray.core.app.dns.Config.HostMapping value) {
      if (staticHostsBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureStaticHostsIsMutable();
        staticHosts_.add(index, value);
        onChanged();
      } else {
        staticHostsBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder addStaticHosts(
        com.v2ray.core.app.dns.Config.HostMapping.Builder builderForValue) {
      if (staticHostsBuilder_ == null) {
        ensureStaticHostsIsMutable();
        staticHosts_.add(builderForValue.build());
        onChanged();
      } else {
        staticHostsBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder addStaticHosts(
        int index, com.v2ray.core.app.dns.Config.HostMapping.Builder builderForValue) {
      if (staticHostsBuilder_ == null) {
        ensureStaticHostsIsMutable();
        staticHosts_.add(index, builderForValue.build());
        onChanged();
      } else {
        staticHostsBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder addAllStaticHosts(
        java.lang.Iterable<? extends com.v2ray.core.app.dns.Config.HostMapping> values) {
      if (staticHostsBuilder_ == null) {
        ensureStaticHostsIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, staticHosts_);
        onChanged();
      } else {
        staticHostsBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder clearStaticHosts() {
      if (staticHostsBuilder_ == null) {
        staticHosts_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000008);
        onChanged();
      } else {
        staticHostsBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public Builder removeStaticHosts(int index) {
      if (staticHostsBuilder_ == null) {
        ensureStaticHostsIsMutable();
        staticHosts_.remove(index);
        onChanged();
      } else {
        staticHostsBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public com.v2ray.core.app.dns.Config.HostMapping.Builder getStaticHostsBuilder(
        int index) {
      return getStaticHostsFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public com.v2ray.core.app.dns.Config.HostMappingOrBuilder getStaticHostsOrBuilder(
        int index) {
      if (staticHostsBuilder_ == null) {
        return staticHosts_.get(index);  } else {
        return staticHostsBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public java.util.List<? extends com.v2ray.core.app.dns.Config.HostMappingOrBuilder> 
         getStaticHostsOrBuilderList() {
      if (staticHostsBuilder_ != null) {
        return staticHostsBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(staticHosts_);
      }
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public com.v2ray.core.app.dns.Config.HostMapping.Builder addStaticHostsBuilder() {
      return getStaticHostsFieldBuilder().addBuilder(
          com.v2ray.core.app.dns.Config.HostMapping.getDefaultInstance());
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public com.v2ray.core.app.dns.Config.HostMapping.Builder addStaticHostsBuilder(
        int index) {
      return getStaticHostsFieldBuilder().addBuilder(
          index, com.v2ray.core.app.dns.Config.HostMapping.getDefaultInstance());
    }
    /**
     * <code>repeated .v2ray.core.app.dns.Config.HostMapping static_hosts = 4;</code>
     */
    public java.util.List<com.v2ray.core.app.dns.Config.HostMapping.Builder> 
         getStaticHostsBuilderList() {
      return getStaticHostsFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        com.v2ray.core.app.dns.Config.HostMapping, com.v2ray.core.app.dns.Config.HostMapping.Builder, com.v2ray.core.app.dns.Config.HostMappingOrBuilder> 
        getStaticHostsFieldBuilder() {
      if (staticHostsBuilder_ == null) {
        staticHostsBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            com.v2ray.core.app.dns.Config.HostMapping, com.v2ray.core.app.dns.Config.HostMapping.Builder, com.v2ray.core.app.dns.Config.HostMappingOrBuilder>(
                staticHosts_,
                ((bitField0_ & 0x00000008) != 0),
                getParentForChildren(),
                isClean());
        staticHosts_ = null;
      }
      return staticHostsBuilder_;
    }

    private java.lang.Object tag_ = "";
    /**
     * <pre>
     * Tag is the inbound tag of DNS client.
     * </pre>
     *
     * <code>string tag = 6;</code>
     * @return The tag.
     */
    public java.lang.String getTag() {
      java.lang.Object ref = tag_;
      if (!(ref instanceof java.lang.String)) {
        com.google.protobuf.ByteString bs =
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        tag_ = s;
        return s;
      } else {
        return (java.lang.String) ref;
      }
    }
    /**
     * <pre>
     * Tag is the inbound tag of DNS client.
     * </pre>
     *
     * <code>string tag = 6;</code>
     * @return The bytes for tag.
     */
    public com.google.protobuf.ByteString
        getTagBytes() {
      java.lang.Object ref = tag_;
      if (ref instanceof String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tag_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }
    /**
     * <pre>
     * Tag is the inbound tag of DNS client.
     * </pre>
     *
     * <code>string tag = 6;</code>
     * @param value The tag to set.
     * @return This builder for chaining.
     */
    public Builder setTag(
        java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  
      tag_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tag is the inbound tag of DNS client.
     * </pre>
     *
     * <code>string tag = 6;</code>
     * @return This builder for chaining.
     */
    public Builder clearTag() {
      
      tag_ = getDefaultInstance().getTag();
      onChanged();
      return this;
    }
    /**
     * <pre>
     * Tag is the inbound tag of DNS client.
     * </pre>
     *
     * <code>string tag = 6;</code>
     * @param value The bytes for tag to set.
     * @return This builder for chaining.
     */
    public Builder setTagBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      
      tag_ = value;
      onChanged();
      return this;
    }

    private boolean disableCache_ ;
    /**
     * <pre>
     * DisableCache disables DNS cache
     * </pre>
     *
     * <code>bool disableCache = 8;</code>
     * @return The disableCache.
     */
    @java.lang.Override
    public boolean getDisableCache() {
      return disableCache_;
    }
    /**
     * <pre>
     * DisableCache disables DNS cache
     * </pre>
     *
     * <code>bool disableCache = 8;</code>
     * @param value The disableCache to set.
     * @return This builder for chaining.
     */
    public Builder setDisableCache(boolean value) {
      
      disableCache_ = value;
      onChanged();
      return this;
    }
    /**
     * <pre>
     * DisableCache disables DNS cache
     * </pre>
     *
     * <code>bool disableCache = 8;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisableCache() {
      
      disableCache_ = false;
      onChanged();
      return this;
    }

    private int queryStrategy_ = 0;
    /**
     * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @return The enum numeric value on the wire for queryStrategy.
     */
    @java.lang.Override public int getQueryStrategyValue() {
      return queryStrategy_;
    }
    /**
     * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @param value The enum numeric value on the wire for queryStrategy to set.
     * @return This builder for chaining.
     */
    public Builder setQueryStrategyValue(int value) {
      
      queryStrategy_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @return The queryStrategy.
     */
    @java.lang.Override
    public com.v2ray.core.app.dns.QueryStrategy getQueryStrategy() {
      @SuppressWarnings("deprecation")
      com.v2ray.core.app.dns.QueryStrategy result = com.v2ray.core.app.dns.QueryStrategy.valueOf(queryStrategy_);
      return result == null ? com.v2ray.core.app.dns.QueryStrategy.UNRECOGNIZED : result;
    }
    /**
     * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @param value The queryStrategy to set.
     * @return This builder for chaining.
     */
    public Builder setQueryStrategy(com.v2ray.core.app.dns.QueryStrategy value) {
      if (value == null) {
        throw new NullPointerException();
      }
      
      queryStrategy_ = value.getNumber();
      onChanged();
      return this;
    }
    /**
     * <code>.v2ray.core.app.dns.QueryStrategy query_strategy = 9;</code>
     * @return This builder for chaining.
     */
    public Builder clearQueryStrategy() {
      
      queryStrategy_ = 0;
      onChanged();
      return this;
    }

    private boolean disableFallback_ ;
    /**
     * <code>bool disableFallback = 10;</code>
     * @return The disableFallback.
     */
    @java.lang.Override
    public boolean getDisableFallback() {
      return disableFallback_;
    }
    /**
     * <code>bool disableFallback = 10;</code>
     * @param value The disableFallback to set.
     * @return This builder for chaining.
     */
    public Builder setDisableFallback(boolean value) {
      
      disableFallback_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool disableFallback = 10;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisableFallback() {
      
      disableFallback_ = false;
      onChanged();
      return this;
    }

    private boolean disableFallbackIfMatch_ ;
    /**
     * <code>bool disableFallbackIfMatch = 11;</code>
     * @return The disableFallbackIfMatch.
     */
    @java.lang.Override
    public boolean getDisableFallbackIfMatch() {
      return disableFallbackIfMatch_;
    }
    /**
     * <code>bool disableFallbackIfMatch = 11;</code>
     * @param value The disableFallbackIfMatch to set.
     * @return This builder for chaining.
     */
    public Builder setDisableFallbackIfMatch(boolean value) {
      
      disableFallbackIfMatch_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>bool disableFallbackIfMatch = 11;</code>
     * @return This builder for chaining.
     */
    public Builder clearDisableFallbackIfMatch() {
      
      disableFallbackIfMatch_ = false;
      onChanged();
      return this;
    }
    @java.lang.Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @java.lang.Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:v2ray.core.app.dns.Config)
  }

  // @@protoc_insertion_point(class_scope:v2ray.core.app.dns.Config)
  private static final com.v2ray.core.app.dns.Config DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new com.v2ray.core.app.dns.Config();
  }

  public static com.v2ray.core.app.dns.Config getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<Config>
      PARSER = new com.google.protobuf.AbstractParser<Config>() {
    @java.lang.Override
    public Config parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<Config> parser() {
    return PARSER;
  }

  @java.lang.Override
  public com.google.protobuf.Parser<Config> getParserForType() {
    return PARSER;
  }

  @java.lang.Override
  public com.v2ray.core.app.dns.Config getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

